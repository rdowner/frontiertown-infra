#!/usr/bin/env bash

set -e

status() {
  echo >&2 "$(tput setaf 2)$@$(tput sgr0)"
}

status "OS-specific preparation"
if [ -f /etc/os-release ]; then
  eval $( source /etc/os-release && echo distro_name=\"$NAME $VERSION_ID\" )
elif [ -f /etc/system-release ]; then
  distro_name="$( cat /etc/system-release )"
else
  distro_name="$( uname )"
fi

case $distro_name in
  "Amazon Linux 2"|"Amazon Linux release 2 "*)
    sudo yum update -y
    sudo yum install -y git-core python2-pip util-linux-user
    ;;
  "Ubuntu 18.04")
    sudo apt-get update -y
    sudo apt-get upgrade -y
    sudo apt-get install -y git python-pip
    ;;
  "CentOS Linux 7")
    sudo yum install -y epel-release
    sudo yum install -y python2-pip git
    ;;
  "Darwin")
    brew install python
    export PATH="/usr/local/opt/python/libexec/bin:${PATH}"
    ;;
  *)
    echo "Could not identify a compatible OS from string: $distro_name"
    exit
esac

status "Install/update pip and virtualenvwrapper"
pip install --upgrade --user pip
# bash remembers where commands are - tell it to forget pip, because we might have a new one now
hash -d pip
# Now put the location where pip install files onto the path (usually .local/bin on Linux, but different on MacOS)
export PATH="$( python -m site --user-base )/bin:$PATH"

pip install --user virtualenvwrapper
export WORKON_HOME=~/Envs
source virtualenvwrapper.sh

status "Set up SSH-to-localhost"
if [ '!' -f "${HOME}/.ssh/id_rsa" ]; then
  ssh-keygen -t rsa -N '' -f "${HOME}/.ssh/id_rsa"
fi
if [ '!' -f "${HOME}/.ssh/id_rsa.pub" ]; then
  ssh-keygen -y -f "${HOME}/.ssh/id_rsa" > "${HOME}/.ssh/id_rsa.pub"
fi
cat "${HOME}/.ssh/id_rsa.pub" >> "${HOME}/.ssh/authorized_keys"
ssh-keyscan -H localhost >> ~/.ssh/known_hosts

if [ '!' -d frontiertown-infra ]; then
  status "Git clone frontiertown-infra"
  git clone https://github.com/rdowner/frontiertown-infra.git
fi

status "Prepare Ansible"
cd frontiertown-infra/ansible
eval $( ./activate-profile workstations )
cat >profiles/workstations/hosts <<EOF
---
all:
    hosts:
        127.0.0.1:
            ansible_user: ${LOGNAME}
EOF

if [ '!' -d "${WORKON_HOME}/ansible" ]; then
  status "Create virtualenv for Ansible"
  /usr/bin/env bash -c '{ source virtualenvwrapper.sh; mkvirtualenv ansible; }'
fi
status "Activate Ansible"
source "${WORKON_HOME}/ansible/bin/activate"

status "Install Ansible"
pip install --upgrade ansible

status "Running Ansible playbook"
ANSIBLE_OPTS=()
if [ -t 1 ]
then
    ANSIBLE_OPTS+=('--ask-become-pass')
fi
ansible-playbook "${ANSIBLE_OPTS[@]}" profiles/workstations/site.yml

status "Deactivate Ansible profile"
deactivate

status "Done"
