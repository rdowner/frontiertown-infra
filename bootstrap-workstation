#!/usr/bin/env bash

set -e

status() {
  echo >&2 "$(tput setaf 2)$@$(tput sgr0)"
}

locatelinuxbrew() {
  test -d "${HOME}/.linuxbrew" && lbhome="${HOME}/.linuxbrew" ||
    test -d "/home/linuxbrew/.linuxbrew" && lbhome="/home/linuxbrew/.linuxbrew" ||
    lbhome=""
}

readylinuxbrew() {
  locatelinuxbrew
  if [ -z "${lbhome}" ]; then
    status "Installing LinuxBrew"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
    locatelinuxbrew
  fi
  # Check that correct linuxbrew is on the path
  if [ "$( which brew || true )" != "${lbhome}/bin/brew" ]; then
    eval $("${lbhome}/bin/brew" shellenv)
  fi
}

readylinuxbrewandpython() {
  readylinuxbrew
  brew install python3
  export PATH="${lbhome}/opt/python/libexec/bin:${PATH}"
}

status "OS-specific preparation"
if [ -f /etc/os-release ]; then
  eval $( source /etc/os-release && echo distro_name=\"$NAME $VERSION_ID\" )
elif [ -f /etc/system-release ]; then
  distro_name="$( cat /etc/system-release )"
else
  distro_name="$( uname )"
fi
echo "Detected OS name: $distro_name"

case $distro_name in
  "Amazon Linux 2"|"Amazon Linux release 2 "*)
    sudo yum update -y
    sudo yum groupinstall -y 'Development Tools'
    sudo yum install -y curl file git
    readylinuxbrewandpython
    ;;
  "Ubuntu 18.04")
    sudo apt-get update -y
    sudo apt-get upgrade -y
    sudo apt-get install -y build-essential curl file git dos2unix
    readylinuxbrewandpython
    ;;
  "CentOS Linux 7")
    sudo yum update -y
    sudo yum groupinstall -y 'Development Tools'
    sudo yum install -y curl file git
    readylinuxbrewandpython
    ;;
  "Darwin")
    brew install python3
    export PATH="/usr/local/opt/python/libexec/bin:${PATH}"
    ;;
  *)
    echo "Could not identify a compatible OS from string: $distro_name"
    exit
esac

status "Install/update pip and virtualenvwrapper"
pip install --upgrade --user pip
# bash remembers where commands are - tell it to forget pip, because we might have a new one now
hash -d pip
# Now put the location where pip install files onto the path (usually .local/bin on Linux, but different on MacOS)
export PATH="$( python -m site --user-base )/bin:$PATH"

pip install --user virtualenvwrapper
export WORKON_HOME=~/Envs
source virtualenvwrapper.sh

if [ ! -f /etc/ssh/ssh_host_rsa_key ]; then
  status "Generating SSH host keys and starting server"
  sudo /etc/init.d/ssh stop
  sudo dpkg-reconfigure openssh-server
  sudo /etc/init.d/ssh start
fi

status "Set up SSH-to-localhost"
if [ '!' -f "${HOME}/.ssh/id_rsa" ]; then ssh-keygen -t rsa -N '' -f "${HOME}/.ssh/id_rsa"; fi
if [ '!' -f "${HOME}/.ssh/id_rsa.pub" ]; then ssh-keygen -y -f "${HOME}/.ssh/id_rsa" > "${HOME}/.ssh/id_rsa.pub"; fi
cat "${HOME}/.ssh/id_rsa.pub" >> "${HOME}/.ssh/authorized_keys"
if [ '!' -f "${HOME}/.ssh/id_ecdsa" ]; then ssh-keygen -t ecdsa -N '' -f "${HOME}/.ssh/id_ecdsa"; fi
if [ '!' -f "${HOME}/.ssh/id_ecdsa.pub" ]; then ssh-keygen -y -f "${HOME}/.ssh/id_ecdsa" > "${HOME}/.ssh/id_ecdsa.pub"; fi
cat "${HOME}/.ssh/id_ecdsa.pub" >> "${HOME}/.ssh/authorized_keys"
chmod go= "${HOME}/.ssh/authorized_keys"
ssh-keyscan -H localhost >> ~/.ssh/known_hosts

if [ '!' -d frontiertown-infra ]; then
  status "Git clone frontiertown-infra"
  git clone https://github.com/rdowner/frontiertown-infra.git
fi

status "Prepare Ansible"
cd frontiertown-infra/ansible
eval $( ./activate-profile workstations )
cat >profiles/workstations/hosts <<EOF
---
all:
    hosts:
        127.0.0.1:
            ansible_user: ${LOGNAME}
EOF
sudo mkdir -p /etc/ansible/facts.d
echo -e "[general]\nwsl=$( which cmd.exe >/dev/null && echo true || echo false )\n[environment]\nUSERPROFILE=$( cmd.exe /C echo %USERPROFILE% 2>/dev/null | dos2unix || true )\n[applications]\ngpg=$( which gpg.exe || echo "" )" | sudo tee /etc/ansible/facts.d/wsl.fact

if [ '!' -d "${WORKON_HOME}/ansible" ]; then
  status "Create virtualenv for Ansible"
  /usr/bin/env bash -c '{ source virtualenvwrapper.sh; mkvirtualenv ansible; }'
fi
status "Activate Ansible"
source "${WORKON_HOME}/ansible/bin/activate"

status "Install Ansible"
pip install --upgrade ansible

status "Running Ansible playbook"
ANSIBLE_OPTS=()
if [ -t 1 ]
then
    ANSIBLE_OPTS+=('--ask-become-pass')
fi
ansible-playbook "${ANSIBLE_OPTS[@]}" profiles/workstations/site.yml

status "Deactivate Ansible profile"
deactivate

status "Done"
